#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
NC='\033[0m'

echo -e "${GREEN}üöÄ –ó–∞–ø—É—Å–∫ Quiz Server${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
get_container_status() {
    if docker-compose ps -a --quiet | grep -q .; then
        if docker-compose ps --format "table {{.Status}}" | grep -q "Up"; then
            echo "running"
        else
            echo "stopped"
        fi
    else
        echo "none"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
choose_profile() {
    echo -e "${BLUE}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:${NC}"
    echo -e "  ${YELLOW}1)${NC} –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º (—Ç—Ä–µ–±—É–µ—Ç .env —Ñ–∞–π–ª)"
    echo -e "  ${YELLOW}2)${NC} –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç .env.dev –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)"
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): " mode_choice

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    if ! [[ "$mode_choice" =~ ^[1-2]$ ]]; then
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 2${NC}"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if [ "$mode_choice" = "1" ]; then
        # –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º .env
        if [ ! -f .env ]; then
            echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
            echo -e "${YELLOW}üìã –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.dev${NC}"
echo -e "${BLUE}üí° –ö–æ–º–∞–Ω–¥–∞: cp .env.dev .env${NC}"
            echo -e "${RED}‚ùó –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞${NC}"
            exit 1
        fi
        echo -e "${GREEN}‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º: .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω${NC}"
        check_required_variables
    else
        # Dev —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º .env.dev
if [ ! -f .env.dev ]; then
echo -e "${RED}‚ùå –§–∞–π–ª .env.dev –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
echo -e "${RED}‚ùó –§–∞–π–ª .env.dev –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ${NC}"
exit 1
fi
echo -e "${GREEN}‚úÖ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: .env.dev —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω${NC}"
        check_required_variables
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
container_status=$(get_container_status)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
echo -e "\n${BLUE}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
echo -e "${GRAY}–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${NC}"

case $container_status in
    "running")
        echo -e "${GREEN}üü¢ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
        echo -e "  ${YELLOW}1)${NC} –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ IDE)"
        echo -e "  ${YELLOW}2)${NC} –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤ Docker (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)"
        echo -e "  ${YELLOW}3)${NC} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo -e "  ${YELLOW}4)${NC} –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–Ω–æ–≤–æ"
        echo -e "  ${YELLOW}5)${NC} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)"
        echo -e "  ${YELLOW}6)${NC} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ"
        max_choice=6
        ;;
    "stopped")
        echo -e "${YELLOW}üü° –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
        echo -e "  ${YELLOW}1)${NC} –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        echo -e "  ${YELLOW}2)${NC} –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤ Docker"
        echo -e "  ${YELLOW}3)${NC} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
        echo -e "  ${YELLOW}4)${NC} –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–Ω–æ–≤–æ"
        echo -e "  ${YELLOW}5)${NC} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ"
        max_choice=5
        ;;
    "none")
        echo -e "${BLUE}üîµ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç${NC}"
        echo -e "  ${YELLOW}1)${NC} –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"
        echo -e "  ${YELLOW}2)${NC} –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤ Docker"
        max_choice=2
        ;;
esac

read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-$max_choice): " choice

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞
if ! [[ "$choice" =~ ^[1-$max_choice]$ ]]; then
    echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ $max_choice${NC}"
    exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
need_profile_choice=false

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è
case $choice in
    2|4) # –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
        need_profile_choice=true
        ;;
    3) # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã
        if [ "$container_status" = "running" ]; then
            need_profile_choice=true
        fi
        ;;
esac

# –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
if [ "$need_profile_choice" = true ]; then
    echo ""
    choose_profile
else
    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –ë–î, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞) –∏—Å–ø–æ–ª—å–∑—É–µ–º dev —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mode_choice="2"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SERVER_PORT –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
get_server_port() {
    if [ "$mode_choice" = "1" ]; then
        # –ü—Ä–æ–¥–∞–∫—à–Ω - —á–∏—Ç–∞–µ–º –∏–∑ .env
        if [ -f .env ]; then
            port=$(grep "^SERVER_PORT=" .env | cut -d'=' -f2 | tr -d '"' | tr -d "'")
            echo "${port:-8081}"
        else
            echo "8081"
        fi
    else
        # Dev - —á–∏—Ç–∞–µ–º –∏–∑ .env.dev
if [ -f .env.dev ]; then
port=$(grep "^SERVER_PORT=" .env.dev | cut -d'=' -f2 | tr -d '"' | tr -d "'")
            echo "${port:-8081}"
        else
            echo "8081"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è POSTGRES_PORT –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
get_postgres_port() {
    if [ "$mode_choice" = "1" ]; then
        # –ü—Ä–æ–¥–∞–∫—à–Ω - —á–∏—Ç–∞–µ–º –∏–∑ .env
        if [ -f .env ]; then
            port=$(grep "^POSTGRES_PORT=" .env | cut -d'=' -f2 | tr -d '"' | tr -d "'")
            echo "${port:-5432}"
        else
            echo "5432"
        fi
    else
        # Dev - —á–∏—Ç–∞–µ–º –∏–∑ .env.dev
if [ -f .env.dev ]; then
port=$(grep "^POSTGRES_PORT=" .env.dev | cut -d'=' -f2 | tr -d '"' | tr -d "'")
            echo "${port:-5432}"
        else
            echo "5432"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ env —Ñ–∞–π–ª–∞
get_env_file_flag() {
    if [ "$mode_choice" = "1" ]; then
        echo "--env-file .env"
    else
        echo "--env-file .env.dev"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
check_required_variables() {
    local env_file=""
    if [ "$mode_choice" = "1" ]; then
        env_file=".env"
    else
        env_file=".env.dev"
    fi

    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ $env_file...${NC}"

    # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    local required_vars=("JWT_SECRET_KEY" "POSTGRES_PASSWORD" "POSTGRES_URL")
    local missing_vars=()

    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" "$env_file" 2>/dev/null || [ -z "$(grep "^${var}=" "$env_file" | cut -d'=' -f2)" ]; then
            missing_vars+=("$var")
        fi
    done

    if [ ${#missing_vars[@]} -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:${NC}"
        for var in "${missing_vars[@]}"; do
            echo -e "  ${RED}‚ùå $var${NC}"
        done
        echo -e "${BLUE}üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª $env_file${NC}"
    else
        echo -e "${GREEN}‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã${NC}"
    fi
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
case $choice in
    1) # –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        env_flag=$(get_env_file_flag)
        if [ "$container_status" = "running" ]; then
            echo -e "${GREEN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL...${NC}"
            docker-compose $env_flag restart postgres
        else
            echo -e "${GREEN}üêò –ó–∞–ø—É—Å–∫ PostgreSQL...${NC}"
            docker-compose $env_flag up -d postgres
        fi
        echo -e "${GREEN}‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏${NC}"
        postgres_port=$(get_postgres_port)
        echo -e "${BLUE}üí° PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:${postgres_port}${NC}"
        echo -e "${BLUE}üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º dev:${NC}"
        echo -e "${GRAY}   ./gradlew bootRun --args='--spring.profiles.active=dev'${NC}"
        echo -e "${GRAY}   –ò–ª–∏ –≤ IDE —Å VM options: -Dspring.profiles.active=dev${NC}"
        ;;
    2) # –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫
        env_flag=$(get_env_file_flag)
        server_port=$(get_server_port)
        server_port=${server_port:-8081}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 8081 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

        if [ "$mode_choice" = "1" ]; then
            echo -e "${GREEN}üê≥ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ (–ø—Ä–æ–¥–∞–∫—à–Ω)...${NC}"
            docker-compose $env_flag up --build -d
        else
            echo -e "${GREEN}üê≥ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...${NC}"
            docker-compose $env_flag up -d
        fi
        sleep 5
        echo -e "${GREEN}‚úÖ –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –∑–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${BLUE}üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:${server_port}${NC}"
        ;;
    3) # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        env_flag=$(get_env_file_flag)
        server_port=$(get_server_port)
        server_port=${server_port:-8081}

        if [ "$container_status" = "running" ]; then
            if [ "$mode_choice" = "1" ]; then
                echo -e "${GREEN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–ø—Ä–æ–¥–∞–∫—à–Ω)...${NC}"
                docker-compose $env_flag up --build -d
            else
                echo -e "${GREEN}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...${NC}"
                docker-compose $env_flag up -d
            fi
        else
            echo -e "${GREEN}üîÑ –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
            docker-compose $env_flag up -d
        fi
        sleep 5
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
        echo -e "${BLUE}üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:${server_port}${NC}"
        ;;
    4) # –°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        env_flag=$(get_env_file_flag)
        server_port=$(get_server_port)
        server_port=${server_port:-8081}

        if [ "$mode_choice" = "1" ]; then
            echo -e "${GREEN}üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ (–ø—Ä–æ–¥–∞–∫—à–Ω)...${NC}"
            docker-compose $env_flag up --build --force-recreate -d
        else
            echo -e "${GREEN}üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...${NC}"
            docker-compose $env_flag up --build --force-recreate -d
        fi
        sleep 5
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞–Ω–æ–≤–æ${NC}"
        echo -e "${BLUE}üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:${server_port}${NC}"
        ;;
    5) # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if [ "$container_status" = "stopped" ]; then
            echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            docker-compose down
            echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã${NC}"
        else
            echo -e "${YELLOW}‚è∏Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)...${NC}"
            docker-compose stop
            echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
            echo -e "${BLUE}üí° –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã${NC}"
        fi
        ;;
    6) # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è running —Å—Ç–∞—Ç—É—Å–∞)
        echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
        docker-compose down
        echo -e "${GREEN}‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã${NC}"
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
        exit 1
        ;;
esac

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å (–∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è)
if [ "$choice" != "5" ] && [ "$choice" != "6" ]; then
    echo -e "\n${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    docker-compose ps

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞
    if [ "$choice" = "2" ] || [ "$choice" = "3" ] || [ "$choice" = "4" ]; then
        echo -e "\n${BLUE}üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:${NC}"
        sleep 3

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if curl -s http://localhost:${server_port}/actuator/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ http://localhost:${server_port}${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${server_port}${NC}"
            echo -e "${BLUE}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs app${NC}"
        fi
    fi
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo -e "\n${GREEN}üéØ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  ${GRAY}–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:${NC} docker-compose logs -f app"
echo -e "  ${GRAY}–õ–æ–≥–∏ PostgreSQL:${NC} docker-compose logs -f postgres"
echo -e "  ${GRAY}–í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:${NC} docker-compose exec app bash"
echo -e "  ${GRAY}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ:${NC} curl http://localhost:${server_port}/actuator/health"
echo -e "  ${GRAY}–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:${NC} docker-compose stop"
echo -e "  ${GRAY}–£–¥–∞–ª–∏—Ç—å:${NC} docker-compose down"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è troubleshooting
if [ "$choice" = "2" ] || [ "$choice" = "3" ] || [ "$choice" = "4" ]; then
    echo -e "\n${YELLOW}üö® –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:${NC}"
    echo -e "  1. ${GRAY}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:${NC} docker-compose logs app"
    echo -e "  2. ${GRAY}–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ .env${NC}"
    echo -e "  3. ${GRAY}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ server.address=0.0.0.0 –≤ application.yml${NC}"
    echo -e "  4. ${GRAY}–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç ${server_port} —Å–≤–æ–±–æ–¥–µ–Ω:${NC} netstat -tlnp | grep ${server_port}"
fi